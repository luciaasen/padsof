
package moon;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.util.ArrayList;

import moon.*;
import moon.user.*;
import moon.course.*;
import moon.course.question.*;


import moon.*;


/**
 * @author Lucia Asencio and Juan Riera
 * This class shows the normal functionality of the app
 *
 */
public class Demonstrator {
	/**
	 * This main will load some users, make a teacher login and create some courses with units and exercises, and then students will sequentally apply, log in and do the exercises
	 */
	public static void main(String args[]){
		
		/*Load users and close app*/
		Academy moon = Academy.getMoonApp();
		try { moon.loadUsers("StudentData.txt"); }
		catch (NumberFormatException | IOException e){
			e.printStackTrace();
		}
		serialize(moon);
		
		/*Open and login as a teacher*/
		moon = deserialize();
		User t = moon.login("tea.cher@edu.es", "IsALotOfWork13579");
				
		/*Creates courses and fill them up*/
		ArrayList
		Academy.setMoon(moon);
		
	}
	/**
	 * Auxiliar method to serialize moon.
	 * @param moon
	 * @throws IOException
	 */
	public static void serialize(Academy moon) {
		try {
		FileOutputStream fileOut =
				new FileOutputStream("moon.ser");
		ObjectOutputStream out = 
				new ObjectOutputStream(fileOut);
		out.writeObject(moon);
		out.close();
		fileOut.close();
		} catch (IOException e){
			e.printStackTrace();
		}
	}
	
	/**
	 * Auxiliar method to deserialize moon.
	 * @return
	 */
	public static Academy deserialize(){
		Academy moon;
		try{
			FileInputStream fileIn =
					new FileInputStream("moon.ser");
			ObjectInputStream in =
					new ObjectInputStream(fileIn);
			moon = (Academy) in.readObject();
			in.close();
			fileIn.close();
		} catch (Exception e){
			e.printStackTrace();
			return null;
		}
		return moon;
	}

	/**
	 * Method that creates a predefined list of 4 exercises 
	 * c1 u1: e1, e2
	 * c1 u2: e3
	 * c2 u1: e4
	 * 
	 * @return ArrayList with the exercises.
	 */
	public ArrayList<Exercise> setUpExes(){
		Exercise e1, e2, e3, e4;
		Question q1, q2, q3, q4, q5, q6;
		LocalDate from = LocalDate.of(2017, 1, 1);
		LocalDate to = LocalDate.of(2017, 12, 12);
		
		e1 = new Exercise();
		e1.setRelevance(2);
		e1.setPenalty(-2);
		e1.setName("Exe One");
		e1.setRandord(false);
		e1.setDates(from, to);
		e1.makeVisible();
		
		e2 = new Exercise();
		e2.setRelevance(1);
		e2.setPenalty(4);
		e2.setName("Exe 2");
		e2.setRandord(false);
		e2.setDates(to,from);
		e2.makeVisible();
		
		e3 = new Exercise();
		e3.setRelevance(1);
		e3.setPenalty(-4);
		e3.setName("Exe 3");
		e3.setRandord(false);
		e3.setDates(from, to);
		e3.makeVisible();
		
		e4 = new Exercise();
		e4.setRelevance(3);
		e4.setPenalty(-1);
		e4.setName("Exe 4");
		e4.setRandord(false);
		e4.setDates(from, to);
		e4.makeVisible();
		
		q1 = new TfQuestion("Am I silly?", 5, false, e1);
		q2 = new TfQuestion("Am I?", 15, true, e1);		
		q3 = new TfQuestion("Am I wrong?", -10, true, e2);
		q4 = new TfQuestion("Are you okay?", 3, true, e2);
		q5 = new TfQuestion("uhm?", 5, false, e3);
		q6 = new TfQuestion("Am I tired?", 5, true, e4);
		
		ArrayList <Exercise> exe = new ArrayList<>();
		exe.add(e1);
		exe.add(e2);
		exe.add(e3);
		exe.add(e4);
		
		return exe;
	}

}
