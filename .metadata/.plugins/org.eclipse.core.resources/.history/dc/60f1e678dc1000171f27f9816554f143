/**
 * 
 */
package moon.course.question.test;

import static org.junit.Assert.*;
import moon.mark.*;
import moon.user.Student;

import org.junit.Before;
import org.junit.Test;

import moon.course.Course;
import moon.course.Exercise;
import moon.course.Unit;
import moon.course.question.OpenQuestion;
import moon.course.question.TfQuestion;

/**
 * @author lucia
 *
 */
public class TfQuestionTest {
	
	private Exercise e1;
	private TfQuestion q1, q2, q3;
	private MExercise me1;

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		e1 = new Exercise();
		q1 = new TfQuestion("Am I silly?", 5, false, e1);
		q2 = new TfQuestion("Am I?", 10, true, e1);		
		q3 = new TfQuestion("Am I?", -10, true, e1);	
		
		
		
		//Add 3 students to c1 and simulate 2 of them answer to q1
		
		Course c1 = new Course("Course 1");
		Unit u1 = new Unit("Unit 1");
		u1.setCourse(c1);
		e1.setUnit(u1);
		Student s1 = new Student("Pepe", "Martin", "password", 1, "a.b@c.d"), s2 = new Student("Mimi", "Gzlez", "wordpass", 2, "a.c@b.d"), s3 = new Student("Marta", "Fdez", "pwwp", 3, "d.c@b.a");
		
		c1.addStudent(s1);
		MCourse mc1 = new MCourse(c1, s1);
		me1 = new MExercise(e1);
		mc1.addMExe(me1);
		q1.answer(false, me1);
		q2.answer(false, me1);
		
		
		c1.addStudent(s2);
		MCourse mc2 = new MCourse(c1, s2);
		MExercise me2 = new MExercise(e1);
		mc2.addMExe(me2);
		q1.answer(false, me2);		
		
		c1.addStudent(s3);
		
	}

	/**
	 * Test method for {@link moon.course.question.TfQuestion#TfQuestion(java.lang.String, double, boolean)}.
	 */
	@Test
	public void testTfQuestion() {
		assertNotNull(a1);
	}

	/**
	 * Test method for {@link moon.course.question.TfQuestion#getAnswer()}.
	 */
	@Test
	public void testGetAnswer() {
		assertTrue(a1.getAnswer());
		assertFalse(a2.getAnswer());
	}

	/**
	 * Test method for {@link moon.course.question.Question#getRelevance()}.
	 */
	@Test
	public void testGetRelevance() {
		assertEquals(a1.getRelevance, 5);
		assertEquals(a2.getRelevance, 6);
	}

	/**
	 * Test method for {@link moon.course.question.Question#getExercise()}.
	 */
	@Test
	public void testGetExercise() {
		assertEquals(a1.getExercise(), e);
		assertEquals(a2.getExercise(), e);
		
	}

	/**
	 * Test method for {@link moon.course.question.Question#calcNPasses()}.
	 */
	@Test
	public void testCalcNPasses() {
		assertEquals(a1.calcNPasses(), 1);
		assertEquals(a2.calcNPasses(), 2);
	}

	/**
	 * Test method for {@link moon.course.question.Question#calcNFails()}.
	 */
	@Test
	public void testCalcNFails() {
		assertEquals(a1.calcNFails(), 2);
		assertEquals(a2.calcNFails(), 1);
	}

	/**
	 * Test method for {@link moon.course.question.Question#calcNAnswered()}.
	 */
	@Test
	public void testCalcNAnswered() {
		assertEquals(a1.calcNAnswered(), 1);
		assertEquals(a2.calcNAnswered(), 2);
	}

	/**
	 * Test method for {@link moon.course.question.Question#calcNUnanswered()}.
	 */
	@Test
	public void testCalcNUnanswered() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.question.Question#answer(moon.mark.MQuestion)}.
	 */
	@Test
	public void testAnswer() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.question.Question#getAnswer()}.
	 */
	@Test
	public void testGetAnswer1() {
		fail("Not yet implemented");
	}

}
