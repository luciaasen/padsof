/**
 * 
 */
package moon.course.tests;

import static org.junit.Assert.*;

import java.time.LocalDate;

import org.junit.Before;
import org.junit.Test;

import moon.course.Course;
import moon.course.Exercise;
import moon.course.Unit;
import moon.course.question.TfQuestion;
import moon.mark.MCourse;
import moon.mark.MExercise;
import moon.user.Student;

/**
 * @author lucia
 *
 */
public class CourseTest {
	private Exercise e1, e2, e3;
	private TfQuestion q1, q2, q3, q4, q5;
	private MExercise me1, me2, me3, me4;
	private Student s1, s2, s3;
	private Course c1, c2;
	private Unit u1, u2, u3;

	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		/*Set 2 exercises with its questions, 1 empty exercise and 3 students*/
		LocalDate from = LocalDate.of(2017, 1, 1);
		LocalDate to = LocalDate.of(2017, 12, 12);
		
		e1 = new Exercise();
		e1.setRelevance(2);
		e1.setPenalty(-2);
		e1.setName("Exe One");
		e1.setRandord(false);
		e1.setDates(from, to);
		e1.makeVisible();
		
		e2 = new Exercise();
		e2.setRelevance(1);
		e2.setPenalty(4);
		e2.setName("Exe 2");
		e2.setRandord(false);
		e2.setDates(to,from);
		e2.makeVisible();
		
		e3 = new Exercise();
		e3.setDates(LocalDate.of(2018, 1, 1), LocalDate.of(2018, 12, 1));
		
		q1 = new TfQuestion("Am I silly?", 5, false, e1);
		q2 = new TfQuestion("Am I?", 10, true, e1);		
		q3 = new TfQuestion("Am I wrong?", -10, true, e2);
		q4= new TfQuestion("Are you okay?", 4, true, e2);
		/*This one will check removeQuestion*/
		q5 = new TfQuestion("uhm?", 5, false, e1);
		e1.removeQuestion(q5);
		
		s1 = new Student("Pepe", "Martin", "password", 1, "a.b@c.d");
		s2 = new Student("Mimi", "Gzlez", "wordpass", 2, "a.c@b.d");
		s3 = new Student("Marta", "Fdez", "pwwp", 3, "d.c@b.a");
		
		
		/*First Course*/
		/**************/
		/*Emulate students do exercises*/
		c1 = new Course("Course 1");
		u1 = new Unit("Unit 1");
		u1.setCourse(c1);
		e1.setUnit(u1);
		e2.setUnit(u1);
		
		/*First student answers correctly to all answers in all exercises*/
		c1.addStudent(s1);
		MCourse mc1 = new MCourse(c1, s1);
		
		me1 = new MExercise(e1);
		mc1.addMExe(me1);
		q1.answer(false, me1);
		q2.answer(true, me1);
		
		me2 = new MExercise(e2);
		mc1.addMExe(me2);
		q3.answer(true, me2);
		q4.answer(true, me2);
		
		/*Second student answers to one question in each exercise. Wrong answer */
		c1.addStudent(s2);
		MCourse mc2 = new MCourse(c1, s2);
		
		me3 = new MExercise(e1);
		mc2.addMExe(me3);
		q1.answer(true, me3);
		//e1.addMExercise(me3);
		
		me4 = new MExercise(e2);
		mc2.addMExe(me4);
		q3.answer(false, me4);
		//e2.addMExercise(me4);	
		
		/*Third student wont answer anything*/
		c1.addStudent(s3);
		
		/*Second Course*/
		/**************/
		/*Emulate students do exercises*/
		c2 = new Course("Course 1");
		u2 = new Unit("Viva la doble");
		u2.setCourse(c2);
		e1.setUnit(u2);
		e2.setUnit(u1);
	}

	/**
	 * Test method for {@link moon.course.Course#Course(java.lang.String)}.
	 */
	@Test
	public void testCourse() {
		assertNotNull(c1);
	}

	/**
	 * Test method for {@link moon.course.Course#calcAverage()}.
	 */
	@Test
	public void testCalcAverage() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#calcNPasses()}.
	 */
	@Test
	public void testCalcNPasses() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#calcNFails()}.
	 */
	@Test
	public void testCalcNFails() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getCourseMark(moon.user.Student)}.
	 */
	@Test
	public void testGetCourseMark() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getMCourse(moon.user.Student)}.
	 */
	@Test
	public void testGetMCourse() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getStudents()}.
	 */
	@Test
	public void testGetStudents() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#addStudent(moon.user.Student)}.
	 */
	@Test
	public void testAddStudent() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#expelStudent(moon.user.Student)}.
	 */
	@Test
	public void testExpelStudent() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#readmitStudent(moon.user.Student)}.
	 */
	@Test
	public void testReadmitStudent() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#addApplication(moon.user.Application)}.
	 */
	@Test
	public void testAddApplication() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#removeApplication(moon.user.Application)}.
	 */
	@Test
	public void testRemoveApplication() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#isExpelled(moon.user.Student)}.
	 */
	@Test
	public void testIsExpelled() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#addUnit(moon.course.Unit)}.
	 */
	@Test
	public void testAddUnit() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#addMark(moon.mark.MCourse)}.
	 */
	@Test
	public void testAddMark() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getName()}.
	 */
	@Test
	public void testGetName() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#setName(java.lang.String)}.
	 */
	@Test
	public void testSetName() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getUnits()}.
	 */
	@Test
	public void testGetUnits() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getExpStudents()}.
	 */
	@Test
	public void testGetExpStudents() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getStudentMarks()}.
	 */
	@Test
	public void testGetStudentMarks() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getApplications()}.
	 */
	@Test
	public void testGetApplications() {
		fail("Not yet implemented");
	}

	/**
	 * Test method for {@link moon.course.Course#getExercises()}.
	 */
	@Test
	public void testGetExercises() {
		fail("Not yet implemented");
	}

}
