/**
 * 
 */
package moon.mark.tests;

import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import moon.mark.*;
import moon.course.Course;
import moon.course.Exercise;
import moon.course.Unit;
import moon.course.question.OpenQuestion;
import moon.user.Student;

/**
 * @author lucia
 *
 */
public class OpenAnswerTest {

	private Exercise e1;
	private OpenQuestion q1, q2, q3;
	private MExercise me1;
	private OpenAnswer answer1, answer2;
	
	/**
	 * @throws java.lang.Exception
	 */
	@Before
	public void setUp() throws Exception {
		e1 = new Exercise();
		e1.setPenalty(-3);
		q1 = new OpenQuestion("Am I silly?", 5, "No", e1);
		q2 = new OpenQuestion("Am I?", 10, "Yes", e1);		
		q3 = new OpenQuestion("Am I?", -10, "Yes", e1);	
		
		answer1 = new OpenAnswer(q1, "No");
		answer2 = new OpenAnswer(q1, "Yes");
		
		//Add 3 students to c1 and simulate 2 of them answer to q1

		/*Course c1 = new Course("Course 1");
		Unit u1 = new Unit("Unit 1");
		u1.setCourse(c1);
		e1.setUnit(u1);*/
		Student s1 = new Student("Pepe", "Martin", "password", 1, "a.b@c.d"), s2 = new Student("Mimi", "Gzlez", "wordpass", 2, "a.c@b.d"), s3 = new Student("Marta", "Fdez", "pwwp", 3, "d.c@b.a");
		
		/*c1.addStudent(s1);
		MCourse mc1 = new MCourse(c1, s1);*/
		me1 = new MExercise(e1);
		/*mc1.addMExe(me1);*/
		q1.answer("No", me1);
		q2.answer("No", me1);
		
		
		/*c1.addStudent(s2);
		MCourse mc2 = new MCourse(c1, s2);*/
		MExercise me2 = new MExercise(e1);
		/*mc2.addMExe(me2);*/
		q1.answer("Yes", me2);		
		
		/*c1.addStudent(s3);*/

		
	}

	/**
	 * Test method for {@link moon.mark.OpenAnswer#isCorrect()}.
	 */
	@Test
	public void testIsCorrect() {
		assertTrue(answer1.isCorrect() & (answer2.isCorrect() == false));
	}

	/**
	 * Test method for {@link moon.mark.OpenAnswer#OpenAnswer(moon.course.question.Question, java.lang.String)}.
	 */
	@Test
	public void testOpenAnswer() {
		assertNotNull(answer1);
		assertNotNull(answer2);
	}
	
	/**
	 * Test method for {@link moon.mark.MQuestion#getMark()}.
	 */
	@Test
	public void testGetMark() {
		assertTrue((answer1.getMark() == 5) & (answer2.getMark() == -3))
	}

	/**
	 * Test method for {@link moon.mark.MQuestion#getQuestion()}.
	 */
	@Test
	public void testGetQuestion() {
		fail("Not yet implemented");
	}

}
